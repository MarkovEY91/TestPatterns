using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TestPatterns
{

    /// <summary>
    /// Одиночка — это порождающий паттерн, который гарантирует существование только одного объекта определённого класса, 
    /// а также позволяет достучаться до этого объекта из любого места программы
    /// 
    /// Одиночка имеет такие же преимущества и недостатки, что и глобальные переменные. 
    /// Его невероятно удобно использовать, но он нарушает модульность вашего кода.
    /// 
    /// Вы не сможете просто взять и использовать класс, зависящий от одиночки в другой программе. 
    /// Для этого придётся эмулировать присутствие одиночки и там. 
    /// Чаще всего эта проблема проявляется при написании юнит-тестов
    /// </summary>
    public sealed class Singleton
    {
        //Модификатор доступа sealed в C# используется для того, чтобы запретить наследование класса или переопределение методов.
        //Он может применяться как к классам, так и к методам.


        // Конструктор Одиночки всегда должен быть скрытым, чтобы предотвратить
        // создание объекта через оператор new.
        private Singleton() { }


        // Объект одиночки храниться в статичном поле класса. Существует
        // несколько способов инициализировать это поле, и все они имеют разные
        // достоинства и недостатки. В этом примере мы рассмотрим простейший из
        // них, недостатком которого является полная неспособность правильно
        // работать в многопоточной среде.
        private static Singleton _instance;


        public static Singleton GetInstance()
        {
            if (_instance == null)
            {
                _instance = new Singleton();
            }

            return _instance;
        }


        // Наконец, любой одиночка должен содержать некоторую бизнес-логику,
        // которая может быть выполнена на его экземпляре.
        public void SomeBuisnessLogic()
        {

        }
    }
}
